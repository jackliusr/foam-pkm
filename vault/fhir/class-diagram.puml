@startuml

interface IRepositoryServiceBase{
    Id: string
    AcceptedTypes: IEnumerable<string>
}

interface IDataService {
    UpsertAsync(): Task<UpsertOutcome?>
    GetAsync():  Task<TResource?>
    HardDeleteAsync(): Task
}

interface ITransactionProvider {
    AcceptedTypes: IEnumerable<string> 
    MustComplete: bool
    IsTransactionStarted: bool
    BeginTransactionAsync: Task<ITransactionScope>
}

interface IContextDataService< TContext > {
    Context: TContext
}
interface ISqlServerTransactionProvider{

}
interface ISqlServerFhirDataStore{
}

interface  ISearchService {
    SearchAsync: Task<SearchResult>
    SearchCompartmentAsync: Task<SearchResult>
}

interface IRepositoryService as "IRepositoryService<DomainResource> " {

}
interface IRepositoryService {

}

IContextDataService -d-|> ITransactionProvider
IContextDataService -d-|> IDataService
ISqlServerFhirDataStore -d-|> IContextDataService
ISqlServerFhirDataStore -d-|> ISqlServerTransactionProvider
IDataService -d-|> IRepositoryServiceBase
ISearchService -d->IRepositoryServiceBase
IRepositoryService_t -d-> ISearchService
IRepositoryService_t -d-> IDataService
@enduml
